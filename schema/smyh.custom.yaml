patch:
  # schema/name: 吉旦餅
  schema/dependencies/+:
  # 當一個開關滿足以下条件時, 其變化值會記憶在 *user.yaml* 中:
  # 1. 該開關項的 *reset* 字段置空: 字段不存在或不指定值.
  # 2. 該開關項寫在 *default.yaml* (*default.custom.yaml*) 的 `switcher/save_options` 列表中,
  #   例如在 *default.custom.yaml* 中寫入: `patch/switcher/save_options: [ single_char, embeded_cands ]`.
  # 3. 開關項的變動是通過 *方案選單* 或 `zhelp` 操作的; 也就是説如果通過快捷鍵操作, 就不會記憶值.
  switches/@3/reset: # 智能·純單
  switches/@4/reset: # 字詞·全單·三碼
  switches/@5/reset: # 普通·嵌入
  switches/@6/reset: # 簡體·繁體
  switches/+:
  key_binder/bindings/+:
  ascii_composer/switch_key/+:
    # 左Shift上屏候选, 右Shift上屏编码
    Shift_L: commit_text
    Shift_R: commit_code
    Control_L: noop
    Control_R: noop
    Caps_Lock: clear
    Eisu_toggle: clear
  recognizer/patterns/+:
    macros: "^/(calc|echo|len)(/[a-z]*)*$"
  punctuator/half_shape/+:
    '<' : '《'
    '>' : '》'
    '/' : [ '/', 、, ､, ／, ÷ ]
    '\' : '、'
    '`' : '`'
    '~' : '~'
    '@' : '@'
    '#' : '#'
    '%' : '%'
    '$' : '¥'
    '*' : '*'
    '=' : '='
    '[' : '「'
    ']' : '」'
    '{' : '『'
    '}' : '』'
  editor/bindings/+:
    # 回车清空编码
    Return: cancel
  # 自定義功能鍵
  funckeys:
    fullci/+: [ 0x2f ]
    clearact/+: [ 0xff1b ]
  core_proc/funckeys/+:
    __include: patch/funckeys
  core_tr/funckeys/+:
    __include: patch/funckeys
  # 自定義宏
  # 先为宏命名, 如 *mymacro*, 则將其添加到 *macros* 下,
  # 再在 *mymacro* 下添加若干候選宏, 每個候選宏都需指定一個 *type*.
  # 当前支持的宏類型:
  # *tip*:    {type: tip,    name: display,     text: commit},                     其中 *text* 为可選項.
  # *switch*: {type: switch, name: switch_name, states: [off_display,on_display]}, 類似 *schema/switches*.
  # *radio*:  {type: radio,  names: [s1,s2,s3], states: [d1,d2,d3]},               類似 *schema/switches* 之 *options*.
  # *shell*:  {type: shell,  name: display,     cmd: shell_cmd,   text: true},     選中时執行 *shell_cmd* 命令, *text* 可選, 設为 true 時收集並提交命令輸出
  # *eval*:   {type: eval,   name: display,     expr: "local a='bar'; return a"},  其中 *name* 为可選項, *expr* 必須是個 *return* 語句, 蓋 *lua* 將以 "function() <expr> end" 方式組裝函數並調用.
  # 例:
  # macros:
  #   mymacro:
  #     - type: tip
  #       name: 僅提示
  #     - type: tip
  #       name: 快捷短語
  #       text: 這是短語内容
  #     - type: switch
  #       name: ascii_mode
  #       states: [ 漢字, 英文 ]
  #     - type: shell
  #       name: 執行shell命令
  #       cmd: /bin/sh -c "date >/tmp/date.txt"
  #     - type: eval
  #       expr: return tostring(os.time())
  macros:
    repo:
      - type: tip
        name: 訪問倉庫
      - type: shell
        name: ⚛吉旦餅
        cmd: xdg-open https://github.com/lost-melody/rime-smyh/tree/wafel
      - type: shell
        name: ⚛宇浩
        cmd: xdg-open https://github.com/forfudan/yuhao
    quick:
      - type: tip
        name: 快捷短語
      - type: tip
        name: ☎郵箱
        text: lost__melody@163.com
      - type: tip
        name: ☏群號
        text: "695190831"
    user:
      - type: shell
        name: ☘用户名
        cmd: whoami
        text: true
    len:
      # 含參 lua 語句示例, 需返回一個 function(args) ... end -> string 函數
      # 對於 :len/hello/world, 其 args 值爲 {"hello", "world"}
      # 注意需要配合 recognizer
      - type: eval
        expr: return
          function(args)
            local lens = {}
            for _, str in ipairs(args) do
              table.insert(lens, string.len(str))
            end
            return table.concat(lens, ",")
          end
    calc:
      # 簡易計算器
      # qwertyuiop => 1234567890
      # hjkl => *-+/
      # x => *
      # s(square) => ^
      # d(dot) => .
      # m(mod) => %
      # a(remainder) => //
      - type: eval
        expr: >
          local nums = {q='1',w='2',e='3',r='4',t='5',y='6',u='7',i='8',o='9',p='0'}
          local signs = {h='*',j='-',k='+',l='/',s='^',d='.',m='%',x='*',a='//'}
          setmetatable(signs, { __index = function() return "+" end })
          return function(args)
            if #args == 0 then return "" end
            local res = {}
            for _, expr in ipairs(args) do
              expr = string.gsub(string.gsub(expr, "[qwertyuiop]", nums), "[^0-9]+", signs)
              local eval = load("return " .. expr)
              table.insert(res, expr .. "=" .. (eval and eval() or "?"))
            end
            return table.concat(res, ",")
          end
    echo:
      # 含參 shell 命令示例, 參数會經由簡易 wrapper 函數傳遞給命令
      # __macrowrapper() { CMD; }; __macrowrapper ARGS <<<''
      # 對於 :echo/eng/hello, 其最終執行的 shell 命令爲 echo eng hello
      # 注意需要配合 recognizer
      - type: shell
        cmd: echo "$@"
        text: true
      - type: shell
        name: info
        cmd: zenity --info --text "$(echo $@)"
  core_proc/macros/+:
    __include: patch/macros
  core_tr/macros/+:
    __include: patch/macros
  # 開關同步
  core_proc/sync_options/+:
    - ascii_mode
    - division.off
    - division.lv1
    - division.lv2
    - full.word
    - full.char
    - full.off
    - single_char
    - smyh_tc
  core_tr/+:
    # enable_completion: false # 是否允許編碼補全
  # menu/page_size: 5 # Change number of candidates
  # style/layout/margin_x: -1 # Hide candidates bar
  embeded_cands/+:
    first_format: "${Stash}[${候選}]${Code}${Comment}"
  # 解注释以下内容, 并复制rime.lua, 以兼容旧版librime-lua
  # engine/processors:
  #   - lua_processor@smyh_core_processor@core_proc
  #   - ascii_composer
  #   - recognizer
  #   - key_binder
  #   - speller
  #   - punctuator
  #   - selector
  #   - navigator
  #   - express_editor
  # engine/translators:
  #   - punct_translator
  #   - history_translator@history
  #   - reverse_lookup_translator@rev_pinyin
  #   - lua_translator@smyh_core_translator@core_tr
  # engine/filters:
  #   - simplifier
  #   - uniquifier
  #   - simplifier@rev_div
  #   - simplifier@division.lv1
  #   - simplifier@division.lv2
  #   - simplifier@division.lv3
  #   - lua_filter@smyh_embeded_cands@embeded_cands
